// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums
enum GovernmentIdType {
  AADHAAR
  PAN
  VOTER_ID
  DRIVING_LICENSE
  PASSPORT
  OTHER
}

enum EventType {
  SOLO
  TEAM
}

enum RegistrationStatus {
  PENDING
  APPROVED
  REJECTED
}

// Core Models
model Event {
  id        String    @id @default(cuid())
  name      String
  type      EventType
  isActive  Boolean   @default(true)

  // Relations
  teams     Team[]
  soloRegs  Registration[] @relation("SoloEventRegistrations")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([name, type])
}

model Team {
  id        String   @id @default(cuid())
  name      String
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String
  isActive  Boolean  @default(true)

  registrations Registration[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, eventId])
}

model Participant {
  id             String           @id @default(cuid())
  fullName       String
  phoneNumber    String
  governmentId   String
  governmentIdType GovernmentIdType
  email          String?

  registrations  Registration[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([phoneNumber])
}

// A registration can be either:
// - SOLO: participant + soloEventId
// - TEAM: participant + teamId (team belongs to a TEAM type event)
model Registration {
  id            String              @id @default(cuid())
  participant   Participant         @relation(fields: [participantId], references: [id])
  participantId String

  status        RegistrationStatus  @default(PENDING)

  // For SOLO events
  soloEvent     Event?              @relation("SoloEventRegistrations", fields: [soloEventId], references: [id])
  soloEventId   String?

  // For TEAM events
  team          Team?               @relation(fields: [teamId], references: [id])
  teamId        String?

  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt

  @@index([status])
}
